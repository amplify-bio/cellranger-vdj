/*
========================================================================================
    klkeys/cellranger-vdj Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

  // Workflow flags
  input                   = null
  outdir                  = './results'
  publish_dir_mode        = 'copy'

  // Reference
  genomes                 = null
  vdj_reference = null
  docker_cellranger       = "docker.io/nfcore/cellranger:7.1.0"

  // CellRanger options

  // Docker containers
  docker_fastqc           = "quay.io/biocontainers/fastqc:0.11.9--0"
  docker_multiqc          = "quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0"

  // QC options
  skip_fastqc             = false

  // Boilerplate options
  multiqc_config          = null
  multiqc_title           = null
  multiqc_logo            = null
  multiqc_methods_description = null
  email_on_fail           = null
  max_multiqc_email_size  = 25.MB
  plaintext_email         = false
  monochrome_logs         = false
  help                    = false
  tracedir                = "${params.outdir}/pipeline_info"
  igenomes_ignore         = true
  custom_config_version   = 'master'
  custom_config_base      = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  validate_params         = true
  show_hidden_params      = false
  schema_ignore_params    = 'genomes,custom_config_base,custom_config_version,hook_url,seq_center,skip_multiqc,enable_conda,igenomes_ignore,multiqc_methods_description,multiqc_logo,skip_fastqc'
  enable_conda            = false
  skip_multiqc            = false
  seq_center              = null
  email                   = null
  hook_url                = null

  // Defaults only, expecting to be overwritten
  max_memory              = 128.GB
  max_cpus                = 16
  max_time                = 240.h

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
       // Avoid this error:
       //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
       // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
       // once this is established and works well, nextflow might implement this behavior as new default.
       docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER   = "/.Rprofile"
  R_ENVIRON_USER   = "/.Renviron"
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'klkeys/cellranger-vdj'
  author = 'Gisela Gabernet (QBIC), Kevin L. Keys (AmplifyBio)'
  homePage = 'https://github.com/klkeys/cellranger-vdj'
  description = 'CellRanger pipeline for immune cell profiling from 10X Genomics sequencers'
  mainScript = 'main.nf'
  nextflowVersion = '>=21.04.1'
  version = '0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// AWS credentials
aws {
  profile = 'abio-dev'
}